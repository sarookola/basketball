/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package display1;

import DataBox.BasketbalMan;
import base.DrawItemDisplay;
import DataBox.SettingPack;
import DataBox.ControolPack;
import DataBox.TeamData;
import DataBox.TimePack;
import animator.AnimPlayer;
import animator.AnimatorJpanel;
import base.DrawSettingS;
import base.DrawTextOn;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author shayan
 */
public class Display_1 extends javax.swing.JPanel implements AnimatorJpanel {

    BufferedImage image1;
    BufferedImage image[];
    Font font;
    int stroke, objecsArrayLenght;
    DrawTextOn drawTextOn;
    DrawItemDisplay[] drawItemDisplay;
    Color backcolor;
    AnimPlayer animPlayer;
    long miliTimerHolder;
    int framecounter;
    boolean[] objectmotion;
    int[] motionDimsIndex;
    boolean imagePlay[];
    long start_zero[];
    SettingPack setting;
    boolean letanimate;
    String frameName;
    boolean showNotAnim;

    //int m20 = 0;
    /**
     * Creates new form Studio_Q
     */
    public Display_1() {
        initComponents();
        objecsArrayLenght = 200;
        drawItemDisplay = new DrawItemDisplay[objecsArrayLenght];
        image = new BufferedImage[objecsArrayLenght];
        start_zero = new long[objecsArrayLenght];
        objectmotion = new boolean[objecsArrayLenght];
        imagePlay = new boolean[objecsArrayLenght];
        motionDimsIndex = new int[objecsArrayLenght];
        letanimate = true;
        for (int i = 0; i < objecsArrayLenght; i++) {
            objectmotion[i] = false;
            imagePlay[i] = false;
            motionDimsIndex[i] = 0;
        }

        try {
            image1 = (BufferedImage) ImageIO.read(new File("pictures\\testPicShayan.png"));
        } catch (IOException ex) {
            Logger.getLogger(Display_1.class.getName()).log(Level.SEVERE, null, ex);
        }

        font = new Font("B Mitra", Font.PLAIN, 40);
        stroke = 2;

        drawTextOn = new DrawTextOn(this);
        drawTextOn.setFont2(font);
        drawTextOn.setStrok(stroke);

        imageAndTextsini();

        animPlayer = new AnimPlayer(20, this);
        animPlayer.setSleep(1);
        animPlayer.start();

        try {
            // Set cross-platform Java L&F (also called "Metal")
            UIManager.setLookAndFeel(
                    UIManager.getCrossPlatformLookAndFeelClassName());
        } catch (UnsupportedLookAndFeelException e) {
            // handle exception
        } catch (ClassNotFoundException e) {
            // handle exception
        } catch (InstantiationException e) {
            // handle exception
        } catch (IllegalAccessException e) {
            // handle exception
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(0, 0, 0));
        setOpaque(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        //   drawTextOn.setG2D(g2d);

        g2d.setBackground(backcolor);
        Rectangle r = this.getBounds();
        g2d.clearRect(0, 0, (int) r.getWidth(), (int) r.getHeight());

        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);

        AffineTransform affImageBack = new AffineTransform();
        affImageBack.scale((float) r.width / image1.getWidth(), (float) r.height / image1.getHeight());
        drawTextOn.setG2D(g2d);
//        g2d.drawImage(imageBack, affImageBack, this);
//      DrawinGObjects drawinGObject=drawinGObjects[1];
//    drawTextOn.drawText2(r, .2, .2, .2, .2, "dsfgsdfgsdf", Color.white, Color.gray);
        int x = 0;
//DrawItemDisplay drawinGObject ;
//for (int i = 1; i < drawItemDisplay.length ; i++) {
//         drawinGObject =drawItemDisplay[i];
//        for (DrawItemDisplay drawinGObject : drawItemDisplay) {
        for (int i = 0; i < drawItemDisplay.length; i++) {

            if (!drawItemDisplay[i].equals(null)) {
                if (showNotAnim | imagePlay[i] | objectmotion[i]) {
                    if (drawItemDisplay[i].isImagevisiblity()) {

                        drawTextOn.drawImage(r, drawItemDisplay[i].getxRelative(), drawItemDisplay[i].getyRelative(), drawItemDisplay[i].getWidthRelative(), drawItemDisplay[i].getHeightRelative(), drawItemDisplay[i].getImagepic());
                    }
                }
                if (drawItemDisplay[i].isTextvisiblity()) {
//                    System.out.println(" the i-1 ="+(i-1)+"\ttext ="+drawItemDisplay[i].getText1());
//                            System.out.print("here in display drwing number:"+x+++"  is: "+drawItemDisplay[i].getOpac());
                    Color colormain = new Color(drawItemDisplay[i].getTextC().getRed(), drawItemDisplay[i].getTextC().getGreen(), drawItemDisplay[i].getTextC().getBlue(), drawItemDisplay[i].getOpac());
                    Color colorstrok = new Color(drawItemDisplay[i].getStrokC().getRed(), drawItemDisplay[i].getStrokC().getGreen(), drawItemDisplay[i].getStrokC().getBlue(), drawItemDisplay[i].getOpac());
//                        System.out.println("text="+drawItemDisplay[i].getText1());
                    drawTextOn.drawText(r, drawItemDisplay[i].getxRelative(), drawItemDisplay[i].getyRelative(), drawItemDisplay[i].getWidthRelative(), drawItemDisplay[i].getHeightRelative(), drawItemDisplay[i].getText1(), colormain, colorstrok);
                }
            }
        }

    }

    private void imageAndTextsini() {
        for (int i = 0; i < objecsArrayLenght; i++) {
            drawItemDisplay[i] = new DrawItemDisplay(i * .1, i * .1, .1, .1, "ف" + i);
            drawItemDisplay[i].setOpac(255);
            drawItemDisplay[i].setTextC(Color.white);
            drawItemDisplay[i].setStrokC(Color.black);
            drawItemDisplay[i].setImage("pictures\\testPicShayan.png");
            drawItemDisplay[i].setImagevisiblity(false);
            drawItemDisplay[i].setTextvisiblity(false);
        }

        drawItemDisplay[2].setWidthRelative(400);
        drawItemDisplay[2].setHeightRelative(250);
        drawItemDisplay[2].setxRelative(300);
        drawItemDisplay[2].setyRelative(720);
        drawItemDisplay[2].setText("امتیاز نهایی");
        drawItemDisplay[2].setImage("pictures\\testPicShayan.png");
        drawItemDisplay[2].setImagevisiblity(true);
        drawItemDisplay[2].setTextvisiblity(true);

    }

    @Override
    public void animate(long miliframe) {

        framecounter = (int) (miliframe);
        if (letanimate) {

            letanimate = false;

            imagePlay(miliframe);

            objectAnim(miliframe);

            repaint();

            letanimate = true;
        } else {

        }

    }

    public int getObjecsArrayLenght() {
        return objecsArrayLenght;
    }

    @Override
    public boolean check() {
        return true;
    }

    void updateSetting(SettingPack settings) {

//setting = new SettingPack(objecsArrayLenght);
//        setting.updatedrarray(settings);
        setting = settings;
        backcolor = settings.getBackcolor();
        font = new Font(settings.getFont(), Font.PLAIN, 40);
        stroke = settings.getStrok();
        drawTextOn.setFont2(font);
        drawTextOn.setStrok(stroke * this.getWidth() / 1000);
//        System.out.println("set on dim is =" + settings.getActiveDimState());
        int activeDimState = settings.getActiveDimState();
        int ActiveDimIndex = settings.getActiveDimIndex();
        int parent = settings.getDrawSettings()[activeDimState].getParent();
//            System.out.println("set on dim parent =" + parent);
//            if (parent > 0) {
//                for (int i = 1; i < settings.getDrawSettings().length; i++) {
//                    if (settings.getDrawSettings()[i].getParent() == parent) {
//                        updateSetting(setting, i, true);
//                    }
//                }

        for (int i = 1; i < settings.getDrawSettings().length; i++) {
            if (settings.getDrawSettings()[i].getDrawingDimsList().size() > ActiveDimIndex) {
                if (settings.getDrawSettings()[i].getDrawingDimsByIndex(ActiveDimIndex).length > activeDimState) {
                    updateSetting(setting, i, true);
                }
            }
        }
        repaint();
    }

    void upDate(ControolPack controolPack) {
//        System.out.println("here t=");
//long t = new Date().getTime();
//        System.out.println("time after controolPack =" + (new Date().getTime() - t));
        letanimate = false;
        showNotAnim = true;

        updateData(controolPack);

        updatevisibility(controolPack);
//        System.out.println("time after updatevisibility =" + (new Date().getTime() - t));
        updateanims(controolPack);
//        System.out.println("time after updateanims =" + (new Date().getTime() - t));
        letanimate = true;

    }

    private void objectAnim(long mili20sec) {

        boolean endpoint = false;
        for (int i = 0; i < objecsArrayLenght; i++) {
//            System.out.print(" -" + i);
//            if (i == 51) {

//            }
            if (objectmotion[i]) {
//                System.out.println("i="+i);
                endpoint = false;
                int mili20Frame = (int) (mili20sec - start_zero[i]);
                int curentframe = setting.getDrawSettings()[i].getDrawingDimsByIndex(motionDimsIndex[i])[0].getFrames();
                int current = 0;
                for (int x = 1; x < setting.getDrawSettings()[i].getDrawingDimsByIndex(motionDimsIndex[i]).length; x++) {
// System.out.println("mili20Frame="+mili20Frame+"\tcurentframe="+curentframe+"x="+x+"  len="+setting.getDrawSettings()[i].getDrawinGObject().length);
                    if (curentframe >= mili20Frame) {
                        current = x - 1;
                        curentframe = (mili20Frame - (curentframe - setting.getDrawSettings()[i].getDrawingDimsByIndex(motionDimsIndex[i])[current].getFrames()));
//                        if (i == 51 & mili20Frame>m20+1) {
//                            System.out.print("\tdrawx=" + x + "   =" + mili20Frame );                            
//                        }
//                        m20=mili20Frame;
                        x = 99;
                    } else {

                        if (x == setting.getDrawSettings()[i].getDrawingDimsByIndex(motionDimsIndex[i]).length - 1) {
//                            System.out.println("\t at frame =" + mili20Frame + "  object motion Stoped  false");
                            objectmotion[i] = false;
//                 curentframe = (mili20Frame - (curentframe - setting.getDrawSettings()[i].getDrawinGObject()[current].getFrames()));
                            endpoint = true;
                            x = 99;
                        } else {
                            curentframe += setting.getDrawSettings()[i].getDrawingDimsByIndex(motionDimsIndex[i])[x].getFrames();
                        }
                    }

                }
//                if (i == 51) {
//                    System.out.print("    current=" + current + "\tframe=" + mili20sec);
//                }
                double allframs = setting.getDrawSettings()[i].getDrawingDimsByIndex(motionDimsIndex[i])[current].getFrames();
                if (allframs == 0) {
                    endpoint = true;
                }
//                if (i == 51) {
////                    System.out.print("\tallframs=" + allframs);
//                }
                if (endpoint) {
                    int lastAnimFrame = setting.getDrawSettings()[i].getDrawingDimsByIndex(motionDimsIndex[i]).length - 1;
                    if (lastAnimFrame > 0);
                    reanimateobjects(i, lastAnimFrame - 1, (double) 1);
                } else {
                    reanimateobjects(i, current, (double) (curentframe / allframs));
                }
//                if (i == 51) {
//                    int temp = (drawItemDisplay[i].getxPos() - m20);
//                    System.out.println("\t , " + temp + "  atframe:" + mili20Frame);
//                    m20 = drawItemDisplay[i].getxPos();
//                }

            }
        }
    }

    private void imagePlay(long mili20sec) {
        for (int i = 0; i < objecsArrayLenght; i++) {
            if (imagePlay[i]) {
//                System.out.println("imagePlay" + i + "  is " + imagePlay[i]);
                int mili20Frame = (int) (mili20sec - start_zero[i]);
                if (mili20Frame >= setting.getDrawSettings()[i].getSequencCount()) {
//                    System.out.println("\t at frame =" + mili20Frame + "iamge play false");
                    drawItemDisplay[i].setimageSeq(setting.getDrawSettings()[i].getSequencCount() - 1);
                    imagePlay[i] = false;
                } else {
                    drawItemDisplay[i].setimageSeq(mili20Frame);
                }
            }
//            System.out.print("\t afterload=" + System.currentTimeMillis() % 1000);
        }
    }

    private void reanimateobjects(int i, int current, double curentframeDivAllframs) {
        setting.setCurrentChildDimIndex(motionDimsIndex[i]);
        int parent = setting.getDrawSettings()[i].getParent() - 1;
        if (parent > 0) {
            if (parent > i & objectmotion[parent]) {
                reanimateobjects(parent, current, curentframeDivAllframs);
            }
//            System.out.print(drawItemDisplay[parent].getText1() + "<=" + drawItemDisplay[parent].getHeightRelative());
            reanimateobjectsByparent(drawItemDisplay[parent], i, current, curentframeDivAllframs);
//            System.out.println();
        } else {
            reanimateobjectsParentLess(i, current, curentframeDivAllframs);
        }
//        System.out.println("i="+i);
//        System.out.println("motionDimsIndexi= "+motionDimsIndex[i]);
        Color c1 = setting.getDrawSettings()[i].getDrawingDimsByIndex(motionDimsIndex[i])[current].getTextC();
        Color c2 = setting.getDrawSettings()[i].getDrawingDimsByIndex(motionDimsIndex[i])[current + 1].getTextC();
        Color cn = new Color((int) (c1.getRed() + ((c2.getRed() - c1.getRed()) * curentframeDivAllframs)),
                (int) (c1.getGreen() + ((c2.getGreen() - c1.getGreen()) * curentframeDivAllframs)),
                (int) (c1.getBlue() + ((c2.getBlue() - c1.getBlue()) * curentframeDivAllframs)));
        drawItemDisplay[i].setTextC(cn);

        c1 = setting.getDrawSettings()[i].getDrawingDimsByIndex(motionDimsIndex[i])[current].getStrokC();
        c2 = setting.getDrawSettings()[i].getDrawingDimsByIndex(motionDimsIndex[i])[current + 1].getStrokC();
        Color csn = new Color((int) (c1.getRed() + ((c2.getRed() - c1.getRed()) * curentframeDivAllframs)),
                (int) (c1.getGreen() + ((c2.getGreen() - c1.getGreen()) * curentframeDivAllframs)),
                (int) (c1.getBlue() + ((c2.getBlue() - c1.getBlue()) * curentframeDivAllframs)));
        drawItemDisplay[i].setStrokC(csn);

    }

    private void reanimateobjectsByparent(DrawItemDisplay parent, int child, int currentFrame, double curentframeDivAllframs) {

        int wScale = setting.reanimateobjectsByparentGetWscale(parent, child, currentFrame, curentframeDivAllframs);
        int hScale = setting.reanimateobjectsByparentGetHscale(parent, child, currentFrame, curentframeDivAllframs);
        int xPos = setting.reanimateobjectsByparentGetXpos(parent, child, wScale, currentFrame, curentframeDivAllframs);
        int yPos = setting.reanimateobjectsByparentGetYpos(parent, child, hScale, currentFrame, curentframeDivAllframs);
        int opac = setting.reanimateobjectsByparentGetOpac(parent, child, currentFrame, curentframeDivAllframs);

        drawItemDisplay[child].setWidthRelative(wScale);
        drawItemDisplay[child].setHeightRelative(hScale);
        drawItemDisplay[child].setxRelative(xPos);
        drawItemDisplay[child].setyRelative(yPos);
        drawItemDisplay[child].setOpac(opac);

    }

    private void reanimateobjectsParentLess(int i, int current, double curentframeDivAllframs) {
//        System.out.println("i=" + i + "  current=" + current + " setting.getDrawSettings()[i]=" + setting.getDrawSettings()[i].getText1() + " =");
        double x1 = setting.getDrawSettings()[i].getDrawingDimsByIndex(motionDimsIndex[i])[current].getWidthRelative();
        double x2 = setting.getDrawSettings()[i].getDrawingDimsByIndex(motionDimsIndex[i])[current + 1].getWidthRelative();
        int wn = (int) (x1 + ((x2 - x1) * curentframeDivAllframs));
        drawItemDisplay[i].setWidthRelative(wn);

        x1 = setting.getDrawSettings()[i].getDrawingDimsByIndex(motionDimsIndex[i])[current].getHeightRelative();
        x2 = setting.getDrawSettings()[i].getDrawingDimsByIndex(motionDimsIndex[i])[current + 1].getHeightRelative();
        int hn = (int) (x1 + ((x2 - x1) * curentframeDivAllframs));
        drawItemDisplay[i].setHeightRelative(hn);

        x1 = setting.getDrawSettings()[i].getDrawingDimsByIndex(motionDimsIndex[i])[current].getxRelative();
        x2 = setting.getDrawSettings()[i].getDrawingDimsByIndex(motionDimsIndex[i])[current + 1].getxRelative();
        int xn = (int) (x1 + ((x2 - x1) * curentframeDivAllframs));
        drawItemDisplay[i].setxRelative(xn);// - wn / 2);

        x1 = setting.getDrawSettings()[i].getDrawingDimsByIndex(motionDimsIndex[i])[current].getyRelative();
        x2 = setting.getDrawSettings()[i].getDrawingDimsByIndex(motionDimsIndex[i])[current + 1].getyRelative();
        int yn = (int) (x1 + ((x2 - x1) * curentframeDivAllframs));
        drawItemDisplay[i].setyRelative(yn);//- hn / 2);

        x1 = setting.getDrawSettings()[i].getDrawingDimsByIndex(motionDimsIndex[i])[current].getopac();
        x2 = setting.getDrawSettings()[i].getDrawingDimsByIndex(motionDimsIndex[i])[current + 1].getopac();
        int on = (int) (x1 + ((x2 - x1) * curentframeDivAllframs));

    }

    private void updateanims(ControolPack controolPack) {
//                long t = new Date().getTime();

        for (int i = 0; i < objecsArrayLenght; i++) {
            objectmotion[i] = false;
//            for (int j = 0; j < controolPack.getVis_Anim_Bool(i).getObjectanim().length; j++) {

//                if (controolPack.getVis_Anim_Bool(i).isObjectanim()) {
//                int[] x = setting.getDrawSettings()[i].getchilds();
//                    if (setting.getDrawSettings()[i].getDrawingDimsByIndex(j).length > 1) {
//                        System.out.println("anim" + i + " start  , and frames =" + setting.getDrawSettings()[i].getDrawinGObject().length);
            objectmotion[i] = controolPack.getVis_Anim_Bool(i).isObjectanim();
            motionDimsIndex[i] = controolPack.getVis_Anim_Bool(i).getMotionDimIndex();;
            start_zero[i] = framecounter;

//                    for (int j = 0; j < x.length; j++) {
//                        objectanim[x[j]]= true;
//                        System.out.print("anim" + x[j] + " start" );
//                        start_zero[x[j]] = framecounter;
//                    }
//                    }
//                }
//            }
            if (controolPack.getVis_Anim_Bool(i).isImagePlay()) {
                if (!(imagePlay[i]) & setting.getDrawSettings()[i].isImageSequency() & setting.getDrawSettings()[i].getSequencCount() > 1) {

//                    System.out.println("play" + i + " start");
                    imagePlay[i] = true;
                    start_zero[i] = framecounter;
                }
            } else {
                imagePlay[i] = false;
            }
        }
//                System.out.println("time after animate +"+this.getFrameName()+"=" + (new Date().getTime() )+"   and old="+t);
    }

    private void updateData(ControolPack controolPack) {
//        System.out.println("we r here" + controolPack.getGameData().getPointTop());
//        long t = new Date().getTime();
        drawItemDisplay[56].setImage(controolPack.getGameData().getTeamPic(0));
        drawItemDisplay[57].setText(controolPack.getGameData().getTeamTopName());
        drawItemDisplay[58].setImage(controolPack.getGameData().getTeamPic(1));
        drawItemDisplay[59].setText(controolPack.getGameData().getTeamBotName());
        drawItemDisplay[60].setText(String.valueOf(controolPack.getGameData().getPointTop()));
        drawItemDisplay[61].setText(String.valueOf(controolPack.getGameData().getPointOldTop()));
        drawItemDisplay[65].setText(String.valueOf(controolPack.getGameData().getPointBot()));
        drawItemDisplay[66].setText(String.valueOf(controolPack.getGameData().getPointOldBot()));
        drawItemDisplay[82].setText(controolPack.getGameData().getQuName());
        drawItemDisplay[85].setText(String.valueOf(controolPack.getTimePack().getMin()));
//        String st ="00";
//        int x = controolPack.getTimePack().getSec();
//        if (x > 0) {
//            st = String.valueOf(controolPack.getTimePack().getSec());
//        }
        drawItemDisplay[86].setText(String.valueOf(controolPack.getTimePack().getSec()));
        drawItemDisplay[88].setText(String.valueOf(controolPack.getTimePack().getSec24()));
        drawItemDisplay[89].setImage(controolPack.getGameData().getTimerCoverPic());

//        System.out.println("t after update1 =" + (new Date().getTime() - t));
        if (controolPack.isActionTeamColor()) {
            int i = 57;
            for (int j = 0; j < setting.getDrawSettings()[i].getDrawingDimsList().size(); j++) {
                for (int k = 0; k < setting.getDrawSettings()[i].getDrawingDimsByIndex(j).length; k++) {
                    setting.getDrawSettings()[i].getDrawingDimsByIndex(j)[k].setTextC(controolPack.getGameData().getTeamaColor()[0]);
                }

            }
            i = 59;
            for (int j = 0; j < setting.getDrawSettings()[i].getDrawingDimsList().size(); j++) {
                for (int k = 0; k < setting.getDrawSettings()[i].getDrawingDimsByIndex(j).length; k++) {
                    setting.getDrawSettings()[i].getDrawingDimsByIndex(j)[k].setTextC(controolPack.getGameData().getTeamaColor()[1]);
                }

            }

        }
//        System.out.println("t after update  2 =" + (new Date().getTime() - t));
        //intro
        drawItemDisplay[121].setText(controolPack.getTeamData().getLines()[0]);
        drawItemDisplay[122].setText(controolPack.getTeamData().getLines()[1]);
        drawItemDisplay[123].setText(controolPack.getTeamData().getLines()[2]);
        drawItemDisplay[128].setText(controolPack.getTeamData().getLines()[3]);
        drawItemDisplay[129].setText(controolPack.getTeamData().getLines()[4]);
        if (!(drawItemDisplay[124].getImage().equalsIgnoreCase(controolPack.getTeamData().getTeamLogoB()))) {
            drawItemDisplay[124].setImage(controolPack.getTeamData().getTeamLogoB());
        }
        if (!(drawItemDisplay[125].getImage().equalsIgnoreCase(controolPack.getTeamData().getTeamLogoA()))) {
            drawItemDisplay[125].setImage(controolPack.getTeamData().getTeamLogoA());
        }

        drawItemDisplay[126].setText(controolPack.getTeamData().getTeamNameB());
        drawItemDisplay[127].setText(controolPack.getTeamData().getTeamNameA());
//        System.out.println("t after update  3 =" + (new Date().getTime() - t));
        //team A B
        int teamShowNomber = controolPack.getTeamData().getShowTeam();
        String teamName, teamLogo, teamCity, teamCoach;
        BasketbalMan bm[];
        if (teamShowNomber == 0) {
            bm = controolPack.getTeamData().getManA();
            teamName = controolPack.getTeamData().getTeamNameA();
            teamLogo = controolPack.getTeamData().getTeamLogoA();
            teamCity = controolPack.getTeamData().getTeamCityA();
            teamCoach = controolPack.getTeamData().getTeamCoachA();
        } else {
            bm = controolPack.getTeamData().getManB();
            teamName = controolPack.getTeamData().getTeamNameB();
            teamLogo = controolPack.getTeamData().getTeamLogoB();
            teamCity = controolPack.getTeamData().getTeamCityB();
            teamCoach = controolPack.getTeamData().getTeamCoachB();
        }
        if (!(drawItemDisplay[136].getImage().equalsIgnoreCase(teamLogo))) {
            drawItemDisplay[136].setImage(teamLogo);
        }
        drawItemDisplay[137].setText(teamName);
        drawItemDisplay[138].setText(teamCity);
//        System.out.println("t after update  4 =" + (new Date().getTime() - t));
        for (int i = 0; i < bm.length; i++) {
            drawItemDisplay[140 + i * 2].setText(String.valueOf(bm[i].getNo()));
            drawItemDisplay[141 + i * 2].setText(bm[i].getName());
        }
        drawItemDisplay[171].setText(teamCoach);
//        System.out.println("t after updat   5 =" + (new Date().getTime() - t));
        //refree
        drawItemDisplay[176].setText(controolPack.getTeamData().getTeamRefree(0));
        drawItemDisplay[177].setText(controolPack.getTeamData().getTeamRefree(1));
        drawItemDisplay[178].setText(controolPack.getTeamData().getTeamRefree(2));
//        System.out.println("t after update   7 =" + (new Date().getTime() - t));

    }

    private void updatevisibility(ControolPack controolPack) {
//        System.out.println("drawItemDisplay="+drawItemDisplay.length );
        for (int i = 0; i < objecsArrayLenght; i++) {
//            System.out.print(" i="+i+ "   draw"+controolPack.getVis_Anim_Bool(i));

            drawItemDisplay[i].setImagevisiblity(controolPack.getVis_Anim_Bool(i).isItemsImagVisible());
            drawItemDisplay[i].setTextvisiblity(controolPack.getVis_Anim_Bool(i).isItemsTextVisible());
        }
    }

    void Updatetime(TimePack timepack) {
        drawItemDisplay[85].setText(String.valueOf(timepack.getMin()));
        drawItemDisplay[86].setText(String.valueOf(timepack.getSec()));
        drawItemDisplay[88].setText(String.valueOf(timepack.getSec24()));
    }

    public String getFrameName() {
        return frameName;
    }

    public void setFrameName(String frameName) {
        this.frameName = frameName;
    }

    private void updateSetting(SettingPack settings, int i, boolean visible) {

        DrawSettingS drawSettingChild, drawSettingparent;
        drawSettingChild = settings.getDrawSettings()[i];

        int parent = drawSettingChild.getParent() - 1;
        //  slecteddim = 0;
//                  System.out.println("select dim="+ slecteddim);
        int activeDimIndex = settings.getActiveDimIndex();
        int activeDimState = settings.getActiveDimState();
        settings.setCurrentChildDimIndex(activeDimIndex);

//        System.out.println("i="+i+"    setingS  =" + settings.getDrawSettings()[i].getDrawingDimsByIndex(activeDimIndex).length);//         System.out.println("\tseting ="+setting.getDrawSettings()[1].getDrawingDimsByIndex(0).length);
        if (parent > 0) {

            drawSettingparent = settings.getDrawSettings()[drawSettingChild.getParent() - 1];
            settings.setCurrentParentDimIndex(activeDimIndex);
            drawItemDisplay[i].setWidthRelative(settings.getWScaleByParent(parent, i, activeDimState));
            drawItemDisplay[i].setHeightRelative(settings.getHScaleByParent(parent, i, activeDimState));
            drawItemDisplay[i].setxRelative(settings.getXPosByParentByOfsett(parent, i, activeDimState));
            drawItemDisplay[i].setyRelative(settings.getYPosByParentByOfsett(parent, i, activeDimState));

        } else {
//            System.out.print("dim Index=" + activeDimIndex + "\t state=" + activeDimState + " activeDimIndex:" + activeDimIndex);
//            System.out.println("   >" + drawSettingChild.getDrawingDimsByIndex(activeDimIndex).length);
            drawItemDisplay[i].setWidthRelative(drawSettingChild.getDrawingDimsByIndex(activeDimIndex)[activeDimState].getWidthRelative());
            drawItemDisplay[i].setHeightRelative(drawSettingChild.getDrawingDimsByIndex(activeDimIndex)[activeDimState].getHeightRelative());
            drawItemDisplay[i].setxRelative(drawSettingChild.getDrawingDimsByIndex(activeDimIndex)[activeDimState].getxRelative());
            drawItemDisplay[i].setyRelative(drawSettingChild.getDrawingDimsByIndex(activeDimIndex)[activeDimState].getyRelative());

        }

        drawItemDisplay[i].setTextC(settings.getDrawSettings()[i].getDrawingDimsByIndex(activeDimIndex)[activeDimState].getTextC());
        drawItemDisplay[i].setStrokC(settings.getDrawSettings()[i].getDrawingDimsByIndex(activeDimIndex)[activeDimState].getStrokC());
        drawItemDisplay[i].setOpac(settings.getDrawSettings()[i].getDrawingDimsByIndex(activeDimIndex)[activeDimState].getopac());

        drawItemDisplay[i].setText(settings.getDrawSettings()[i].getText1());

//      System.out.println("im"+settings.getDrawSettings()[i].getImage());
        if (!(settings.getDrawSettings()[i].getImage().equals(drawItemDisplay[i].getImage()) & drawItemDisplay[i].getSequencCount() == settings.getDrawSettings()[i].getSequencCount())) {
            drawItemDisplay[i].setImage(settings.getDrawSettings()[i].getImage());
            drawItemDisplay[i].setSequencCount(settings.getDrawSettings()[i].getSequencCount());
        }
        if (visible) {
            drawItemDisplay[i].setTextvisiblity(settings.getDrawSettings()[i].isTextvisiblity());
            drawItemDisplay[i].setImagevisiblity(settings.getDrawSettings()[i].isImagevisiblity());
            if (setting.getDrawSettings()[i].getSequencCount() > 0 & setting.getDrawSettings()[i].isImageSequency()) {
                drawItemDisplay[i].setimageSeq(setting.getDrawSettings()[i].getSequencCount() - 1);
            }

        }
    }

}
//40,41,42,43,44,45,46,47,48
