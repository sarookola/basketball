/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Controll;

import Comunicate.Server;
import DataBox.Pack;
import DataBox.SettingPack;
import base.DrawSettingDims;
import display1.Display_Frame;
import java.awt.Color;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;

/**
 *
 * @author shayan
 */
public class Settings extends javax.swing.JPanel implements SettingInterface {



    // display1.Display_Frame out[];
    private final Server server;
    SettingPack settings;
    String settingfile = "DefaultSetting0.json",settingfilesave = "DefaultSetting.json";
    int markCurrent, markTotal;
    TimerTimer timer;
    int onLeter;
    int curentDimsListIndex;
    DimsPanel dimsPanel;
    boolean loadsetting = true, Dimcallupdate = false;

    private JTextField jt[];

    /**
     * Creates new form Settings
     */
    public Settings(Server server) {
//        settings = new SettingPack();
//        loadsetting(settingfile);
        this.server = server;
        initComponents();

        dimsPanel = new DimsPanel(settings, this);
        jPanelDims.add(dimsPanel);
        init2();

//        jt = new JTextField[20];
//        for (int i = 0; i < 20; i++) {
//            jt[i] = new JTextField("?");
//            jt[i].setFont(new java.awt.Font("Tahoma", 0, 24));
//
//        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButtonColor = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jButton12 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jComboBoxFonts = new javax.swing.JComboBox();
        jPanel12 = new javax.swing.JPanel();
        jSliderStrok = new javax.swing.JSlider();
        jPanel14 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jSpinnerSeetingCODE = new javax.swing.JSpinner();
        jPanel4 = new javax.swing.JPanel();
        jPanelDims = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jComboBoxItems = new javax.swing.JComboBox();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxLinkItem = new javax.swing.JComboBox();
        jSpinner1 = new javax.swing.JSpinner();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(1, 0));

        jButtonColor.setText("رنگ زمینه");
        jButtonColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonColorActionPerformed(evt);
            }
        });

        jButton11.setText("update");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonColor, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                    .addComponent(jButtonColor, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        jPanel3.add(jPanel2);

        jPanel7.setLayout(new java.awt.GridLayout(1, 0));

        jButton12.setText("Load Setting As");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton1.setText("Save Seetting As");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(151, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jButton12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        jPanel7.add(jPanel9);

        jPanel10.setLayout(new java.awt.GridLayout(0, 1));

        jPanel11.setLayout(new java.awt.GridLayout(1, 0));

        jComboBoxFonts.setModel(new javax.swing.DefaultComboBoxModel(GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames()));
        jComboBoxFonts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBoxFontsMouseClicked(evt);
            }
        });
        jComboBoxFonts.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBoxFontsKeyPressed(evt);
            }
        });
        jPanel11.add(jComboBoxFonts);

        jPanel10.add(jPanel11);

        jPanel12.setLayout(new java.awt.GridLayout(1, 0));

        jSliderStrok.setMaximum(20);
        jSliderStrok.setValue(2);
        jPanel12.add(jSliderStrok);

        jPanel10.add(jPanel12);

        jPanel14.setLayout(new java.awt.GridLayout(1, 0));

        jLabel2.setText("Setting Code");
        jPanel14.add(jLabel2);
        jPanel14.add(jSpinnerSeetingCODE);

        jPanel10.add(jPanel14);

        jPanel7.add(jPanel10);

        jPanel3.add(jPanel7);

        jPanel5.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanelDims.setLayout(new java.awt.BorderLayout());
        jPanel4.add(jPanelDims, java.awt.BorderLayout.CENTER);

        jPanel8.setLayout(new java.awt.GridLayout(1, 1));

        jComboBoxItems.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxItemsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jComboBoxItems, 0, 585, Short.MAX_VALUE)
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jComboBoxItems, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel8.add(jPanel13);

        jLabel1.setText("Link to");

        jComboBoxLinkItem.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jSpinner1, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBoxLinkItem, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(160, 160, 160))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                .addComponent(jComboBoxLinkItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel8.add(jPanel6);

        jPanel4.add(jPanel8, java.awt.BorderLayout.PAGE_START);

        jPanel5.add(jPanel4, java.awt.BorderLayout.CENTER);

        add(jPanel5, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonColorActionPerformed
        // TODO add your handling code here:
        Color c = JColorChooser.showDialog(null, "Choose a Color", jButtonColor.getForeground());
        if (c != null) {
            jButtonColor.setForeground(c);
            settingupdate();
        }
    }//GEN-LAST:event_jButtonColorActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
        loadsettingfile();
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        dimupdateSetting();
        saveSetting(settingfilesave);
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jComboBoxItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxItemsActionPerformed
        // TODO add your handling code here:
        reSelectItem();
    }//GEN-LAST:event_jComboBoxItemsActionPerformed

    private void jComboBoxLinkItemActionPerformed(java.awt.event.ActionEvent evt) {
        linkSet(jComboBoxLinkItem.getSelectedIndex());
        //        System.out.println("item changed" + jComboBoxLinkItem.getSelectedIndex() + "\t evt=" + evt.paramString());
    }
    private void jComboBoxFontsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxFontsMouseClicked
        // TODO add your handling code here:
        settingupdate();
    }//GEN-LAST:event_jComboBoxFontsMouseClicked

    private void jComboBoxFontsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBoxFontsKeyPressed
        // TODO add your handling code here:
        settingupdate();
    }//GEN-LAST:event_jComboBoxFontsKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        savesettingAs();
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButtonColor;
    private javax.swing.JComboBox jComboBoxFonts;
    private javax.swing.JComboBox jComboBoxItems;
    private javax.swing.JComboBox jComboBoxLinkItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanelDims;
    private javax.swing.JSlider jSliderStrok;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinnerSeetingCODE;
    // End of variables declaration//GEN-END:variables

    private void init2() {

        loadsetting(settingfile);
        jComboBoxFonts.setModel(new javax.swing.DefaultComboBoxModel(GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames()));
//        System.out.println("setting.get"+settings.getSelectedItem());
        jComboBoxItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxItemsActionPerformed(evt);
            }
        });
        jComboBoxLinkItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxLinkItemActionPerformed(evt);
            }
        });

        comboResets();
        dimsPanel.setSettingPack(settings);
        updateSetting();
        loadsetting = false;
        jComboBoxItems.setSelectedIndex(settings.getSelectedItem());

    }

    private void settingupdate() {

        settings.setBackcolor(jButtonColor.getForeground());
        settings.setFont(jComboBoxFonts.getSelectedItem().toString());
        settings.setStrok(jSliderStrok.getValue());
        settings.setSeetingCode(Integer.parseInt(jSpinnerSeetingCODE.getValue().toString()));
//        System.out.println("update w="+settings.getDrawinGObjectses()[0].getDrawinGObject()[0].getWidthRelative());
        sendSetting(settings);
    }

    private void saveSetting(String st) {
        for (int i = 0; i < st.length(); i++) {
            if (st.charAt(i) == '.') {
                st = st.substring(0, i);
                i = st.length();
            }

        }
        new FileManipulat().saveObject(st + settings.getSeetingCode() + ".json", settings);

    }

    private void loadsetting(String st) {

        settings = new FileManipulat().loadSetting(st, server.getobjecsArrayLenght());

        settings.setActiveDimState(0);
        settings.setActiveDimIndex(0);
        settings.setSelectedItem(0);
    }

    private void updateSetting() {

        jSliderStrok.setValue(settings.getStrok());
        jButtonColor.setForeground(settings.getBackcolor());
        jComboBoxFonts.setSelectedItem(settings.getFont());
        jComboBoxItems.setSelectedIndex(settings.getSelectedItem());
        jSpinnerSeetingCODE.setValue(settings.getSeetingCode());
        sendSetting(settings);

        jPanelDims.updateUI();

        jComboBoxFonts.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxFontsItemStateChanged(evt);
            }
        });
        jSliderStrok.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderStrokStateChanged(evt);
            }
        });

    }

    private void jSliderStrokStateChanged(javax.swing.event.ChangeEvent evt) {
        settingupdate();
    }

    private void jComboBoxFontsItemStateChanged(java.awt.event.ItemEvent evt) {
        settingupdate();
    }

    @Override
    public void dimupdateSetting() {
        if (!Dimcallupdate) {
            Dimcallupdate = true;
            updateSettingFromDim();
            Dimcallupdate = false;
            sendSetting(settings);
        }

    }

    @Override
    public void dimLess(int selectedDimsListIndex) {
        if (!Dimcallupdate) {
            Dimcallupdate = true;
            int x = jComboBoxItems.getSelectedIndex();
            settings.getDrawSettings()[x].getDrawingDimsList().remove(selectedDimsListIndex);
            dimsPanel.setcombo(settings.getDrawSettings()[x].getDrawingDimsList());
            sendSetting(settings);

            Dimcallupdate = false;
        }
    }

    @Override
    public void dimSadd(int selectedIndex, int selectedDim) {
        if (!Dimcallupdate) {
            Dimcallupdate = true;
            int x = jComboBoxItems.getSelectedIndex();
            curentDimsListIndex = selectedIndex;
            DrawSettingDims test[] = new DrawSettingDims[1];
            test[0] = new DrawSettingDims();
            test[0].setDim(settings.getDrawSettings()[x].getDrawingDimsByIndex(curentDimsListIndex)[selectedDim].getDim());
            test[0].setTextC(settings.getDrawSettings()[x].getDrawingDimsByIndex(curentDimsListIndex)[selectedDim].getTextC());
            settings.getDrawSettings()[x].getDrawingDimsList().add(curentDimsListIndex + 1, test);
            dimsPanel.setcombo(settings.getDrawSettings()[x].getDrawingDimsList());
            sendSetting(settings);

            Dimcallupdate = false;
        }
        //dimScomboReSelect(curentDimsListIndex);

    }

    @Override
    public void dimScomboReSelect(int dimSelectedIndex, int activeDimState) {
        if (!Dimcallupdate) {
            Dimcallupdate = true;
            int x = jComboBoxItems.getSelectedIndex();
            settings.setActiveDimIndex(dimSelectedIndex);
            settings.setActiveDimState(activeDimState);
            curentDimsListIndex = dimSelectedIndex;
            int y = settings.getDrawSettings()[x].getDrawingDimsByIndex(dimSelectedIndex).length;
            dimsPanel.getDimPanel().clear();

            for (int i = 0; i < y; i++) {
                dimsPanel.getDimPanel().add(new DimPanel(this));
//           System.out.println("i="+i+" y="+y+"\tdims i="+dimsPanel.getDimPanel().size() +"\t dim  i"+settings.getDrawSettings()[x].getDrawinGObject()[i].getDim()[0]);
                dimsPanel.getDimPanel().get(i).setdims(settings.getDrawSettings()[x].getDrawingDimsByIndex(dimSelectedIndex)[i].getDim());
                dimsPanel.getDimPanel().get(i).setFrame(settings.getDrawSettings()[x].getDrawingDimsByIndex(dimSelectedIndex)[i].getFrames());
                dimsPanel.getDimPanel().get(i).setOpacity(settings.getDrawSettings()[x].getDrawingDimsByIndex(dimSelectedIndex)[i].getopac());
//                             set   System.out.println("color1="+settings.getDrawSettings()[x].getDrawinGObject()[i].getTextC().getRGB()+" and set");
                dimsPanel.getDimPanel().get(i).setColor(settings.getDrawSettings()[x].getDrawingDimsByIndex(dimSelectedIndex)[i].getTextC());

                dimsPanel.getDimPanel().get(i).setStrokColor1(settings.getDrawSettings()[x].getDrawingDimsByIndex(dimSelectedIndex)[i].getStrokC());

            }

            dimsPanel.jTabbedPaneReset();
            updateUI();
            Dimcallupdate = false;
        }
    }

    private void loadsettingfile() {
        loadsetting = true;
        JFileChooser chooser = new JFileChooser(new File("*.*"));
        File f = new File(settings.getPath());
        chooser.setCurrentDirectory(f);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            {
                loadsetting(chooser.getSelectedFile().getPath());
                settings.setPath(chooser.getSelectedFile().getPath());
                comboResets();
            }
        }
        loadsetting = false;

    }

    private void savesettingAs() {
        loadsetting = true;
        JFileChooser chooser = new JFileChooser(new File("*.json"));
        File f = new File(settings.getPath());
        chooser.setCurrentDirectory(f);
        if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            {
//                settings.setPath(chooser.getSelectedFile().getPath());
                saveSetting(chooser.getSelectedFile().getPath());
            }
        }
        loadsetting = false;

    }

    private void reSelectItem() {
        if (!loadsetting) {
//            setdrawImagevisall(false);            
            Dimcallupdate = true;
            int x = jComboBoxItems.getSelectedIndex();
            //DimsPanel y = new  DimsPanel();
            if (x < 0) {
                x = 0;
            }
//            settings.setSelectedItem(x);
//        System.out.println("x="+x+"   4="+settings.getDrawSettings()[x]+"   parent="+settings.getDrawSettings()[x].getParent()+ "   sixe="+jComboBoxLinkItem.getItemCount());
            int parent = settings.getDrawSettings()[x].getParent();
            jComboBoxLinkItem.setSelectedIndex(parent);
            if (parent == 0) {
                parent = x;
            }
//           setdrawImagevisall(x);

            dimsPanel.setImageVisible(settings.getDrawSettings()[x].isImagevisiblity());
            dimsPanel.setTextVisible(settings.getDrawSettings()[x].isTextvisiblity());
            dimsPanel.setTextField1(settings.getDrawSettings()[x].getText1());
            dimsPanel.setAnimFrame(settings.getDrawSettings()[x].getSequencCount());
            dimsPanel.setAnimating(settings.getDrawSettings()[x].isImageSequency());
            dimsPanel.setImage(settings.getDrawSettings()[x].getImage());

            dimsPanel.redrawImage();
            dimsPanel.getDimPanel().clear();
            int dimslist = settings.getDrawSettings()[x].getDrawingDimsList().size();
            dimsPanel.setcombo(settings.getDrawSettings()[x].getDrawingDimsList());   //fill combo
            this.curentDimsListIndex = 0;

            int y = settings.getDrawSettings()[x].getDrawingDimsByIndex(0).length;
//            System.out.println("y=" + y);
            for (int i = 0; i < y; i++) {
                dimsPanel.getDimPanel().add(new DimPanel(this));
//          System.out.println("i="+i+" y="+y+"\tdims ="+dimsPanel.getDimPanel().size() );//
//                System.out.println("\t dim  i"+settings.getDrawSettings()[x].getDrawingDimsByIndex(0)[i].getDim()[0]);
                dimsPanel.getDimPanel().get(i).setdims(settings.getDrawSettings()[x].getDrawingDimsByIndex(0)[i].getDim());
                dimsPanel.getDimPanel().get(i).setFrame(settings.getDrawSettings()[x].getDrawingDimsByIndex(0)[i].getFrames());
                dimsPanel.getDimPanel().get(i).setOpacity(settings.getDrawSettings()[x].getDrawingDimsByIndex(0)[i].getopac());
//                             set   System.out.println("color1="+settings.getDrawSettings()[x].getDrawinGObject()[i].getTextC().getRGB()+" and set");
                dimsPanel.getDimPanel().get(i).setColor(settings.getDrawSettings()[x].getDrawingDimsByIndex(0)[i].getTextC());

                dimsPanel.getDimPanel().get(i).setStrokColor1(settings.getDrawSettings()[x].getDrawingDimsByIndex(0)[i].getStrokC());

            }

            dimsPanel.jTabbedPaneReset();
            updateUI();
            Dimcallupdate = false;
//            sendSetting(settings);
        }
    }

    private void comboResets() {
        int index = settings.getSelectedItem();
        jComboBoxItems.removeAllItems();
//                 System.out.println("2="+settings.getSelectedItem());
        jComboBoxLinkItem.removeAllItems();
//                 System.out.println("3="+settings.getSelectedItem());
        jComboBoxLinkItem.addItem("NO Link");
//                 System.out.println("3="+settings.getSelectedItem());
        for (int i = 0; i < jComboBoxItems.getActionListeners().length; i++) {
            jComboBoxItems.removeActionListener(jComboBoxItems.getActionListeners()[i]);
        }
        for (int i = 0; i < jComboBoxLinkItem.getActionListeners().length; i++) {
            jComboBoxLinkItem.removeActionListener(jComboBoxLinkItem.getActionListeners()[i]);
        }

        for (int i = 0; i < server.getobjecsArrayLenght(); i++) {
            jComboBoxItems.addItem(i + "->" + settings.getDrawSettings()[i].getText1());
            jComboBoxLinkItem.addItem(i + "->" + settings.getDrawSettings()[i].getText1());
        }

//        System.out.println("4="+settings.getSelectedItem());
        jComboBoxItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxItemsActionPerformed(evt);
            }
        });
        jComboBoxLinkItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxLinkItemActionPerformed(evt);
            }
        });

//        settings.setSelectedItem(index);
//System.out.println("5="+settings.getSelectedItem());
        updateSetting();
    }

    private void linkSet(int linkNew) {
        int selectItem = jComboBoxItems.getSelectedIndex();
        if (selectItem < 0) {
//            System.out.println("Thanks to use this Program , Mokhtari/Ranjbar");
        } else {
            int linkOld = settings.getDrawSettings()[selectItem].getParent();
            settings.getDrawSettings()[selectItem].setParent(linkNew);
            if (linkNew > 1) {
                if (!settings.getDrawSettings()[linkNew - 1].getChilds().contains(linkNew)) {
                    settings.getDrawSettings()[linkNew - 1].addChild(linkNew);
                }
            }
            if (linkOld > 1) {
                settings.getDrawSettings()[linkOld - 1].removeChild(selectItem);
            }
//            reCalDimByLink(selectItem, linkOld, linkNew);
        }
    }

    private void reCalDimByLink(int selectItem, int linkOld, int linkNew) {
        for (int k = 0; k < settings.getDrawSettings()[selectItem].getDrawingDimsList().size(); k++) {
            curentDimsListIndex = k;
            int dimCountAll = settings.getDrawSettings()[selectItem].getDrawingDimsByIndex(curentDimsListIndex).length;
            int dimOld[] = new int[4], link1[] = new int[4], link2[] = new int[4], dimnew[] = new int[4];
            link1[0] = 0;
            link1[1] = 0;
            link1[2] = 1000;
            link1[3] = 1000;
            link2[0] = 0;
            link2[1] = 0;
            link2[2] = 1000;
            link2[3] = 1000;

            for (int i = 0; i < dimCountAll; i++) {
                dimOld = settings.getDrawSettings()[selectItem].getDrawingDimsByIndex(curentDimsListIndex)[i].getDim();
                if (linkOld > 1) {
                    int Link_oldDimsUse = 0;
                    if (settings.getDrawSettings()[linkOld - 1].getDrawingDimsByIndex(curentDimsListIndex).length > i) {
                        Link_oldDimsUse = i;
                    }
                    link1 = settings.getDrawSettings()[linkOld - 1].getDrawingDimsByIndex(curentDimsListIndex)[Link_oldDimsUse].getDim();
                }
                if (linkNew > 1) {
                    int LinkNewDimsUse = 0;
                    if (settings.getDrawSettings()[linkNew - 1].getDrawingDimsByIndex(curentDimsListIndex).length > i) {
                        LinkNewDimsUse = i;
                    }
                    link2 = settings.getDrawSettings()[linkNew - 1].getDrawingDimsByIndex(curentDimsListIndex)[LinkNewDimsUse].getDim();
                    if (link2[2] == 0 | link2[3] == 0) {
                        link2[2] = 1000;
                        link2[3] = 1000;
                    }
                }
                //position 
                dimnew[0] = (dimOld[0] * link1[2] / 1000 + link1[0] - link2[0]) * 1000 / (link2[2]);
                dimnew[1] = (dimOld[1] * link1[3] / 1000 + link1[1] - link2[1]) * 1000 / (link2[3]);
                // size 
                dimnew[2] = dimOld[2] * link1[2] / link2[2];
                dimnew[3] = dimOld[3] * link1[3] / link2[3];

                dimsPanel.getDimPanel().get(i).setdims(dimnew);
                settings.getDrawSettings()[selectItem].getDrawingDimsByIndex(curentDimsListIndex)[i].setDim(dimnew);
            }

        }
    }

    private void updateSettingFromDim() {
        int x = jComboBoxItems.getSelectedIndex();
        settings.setActiveDimState(dimsPanel.getActiveDimState());
        settings.getDrawSettings()[x].setImagevisiblity(dimsPanel.isImageVisible());
        settings.getDrawSettings()[x].setTextvisiblity(dimsPanel.isTextVisible());
        settings.getDrawSettings()[x].setText1(dimsPanel.getTextField1());
        settings.getDrawSettings()[x].setImage(dimsPanel.imagePanel.getAddress());
        settings.getDrawSettings()[x].setImageSequency(dimsPanel.isanimating());
        settings.getDrawSettings()[x].setSequencCount(dimsPanel.getAnimFrame());
        int dims = dimsPanel.dimPanel.size();
        settings.getDrawSettings()[x].setDrawinGObject(curentDimsListIndex, dims);

        for (int i = 0; i < dims; i++) {
//        int i = settings.getSelecteddim();
            settings.getDrawSettings()[x].getDrawingDimsByIndex(curentDimsListIndex)[i].setDim(dimsPanel.dimPanel.get(i).getdims());
            settings.getDrawSettings()[x].getDrawingDimsByIndex(curentDimsListIndex)[i].setOpac(dimsPanel.dimPanel.get(i).getOpacity());
            settings.getDrawSettings()[x].getDrawingDimsByIndex(curentDimsListIndex)[i].setFrames(dimsPanel.dimPanel.get(i).getFrame());
            settings.getDrawSettings()[x].getDrawingDimsByIndex(curentDimsListIndex)[i].setTextC(dimsPanel.dimPanel.get(i).getColor1());
            settings.getDrawSettings()[x].getDrawingDimsByIndex(curentDimsListIndex)[i].setStrokC(dimsPanel.dimPanel.get(i).getStrokColor1());
        }
        settingupdate();

    }

    void sendSetting(SettingPack settings) {
        server.writeSocket(new Pack(0, settings));
    }

    void sendSetting() {
        server.writeSocket(new Pack(0, settings));
    }

    private void setdrawImagevisall2(boolean b) {

        for (int i = 0; i < settings.getDrawSettings().length; i++) {
            settings.getDrawSettings()[i].setImagevisiblity(false);

        }
    }

    private void setdrawImagevisall2(int x) {
        if (x < settings.getDrawSettings().length - 4) {
            for (int i = 0; i < 4; i++) {
                settings.getDrawSettings()[x + i].setImagevisiblity(true);
            }
        }
    }

    public boolean isDimcallupdate() {
        return Dimcallupdate;
    }

    public void setDimcallupdate(boolean Dimcallupdate) {
        this.Dimcallupdate = Dimcallupdate;
    }

}
